/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WIPPERSNAPPER_CHECKIN_CHECKIN_PB_H_INCLUDED
#define PB_WIPPERSNAPPER_CHECKIN_CHECKIN_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* *
 Response. Specifies if the hardware definiton is within the database. */
typedef enum _wippersnapper_checkin_CheckinResponse_Response {
    wippersnapper_checkin_CheckinResponse_Response_RESPONSE_UNSPECIFIED = 0, /* * Invalid response from server */
    wippersnapper_checkin_CheckinResponse_Response_RESPONSE_OK = 1, /* * Board found within definition index */
    wippersnapper_checkin_CheckinResponse_Response_RESPONSE_BOARD_NOT_FOUND = 2 /* * Board not found in definition index */
} wippersnapper_checkin_CheckinResponse_Response;

/* Struct definitions */
/* *
 CheckinRequest notifies the MQTT broker that a new/existing device is requesting to connect. */
typedef struct _wippersnapper_checkin_CheckinRequest {
    char hardware_uid[64]; /* * Identifies the client's physical hardware (board name + last 3 of NIC's MAC address). */
    char firmware_version[25]; /* * Identifies the client's firmware version. */
} wippersnapper_checkin_CheckinRequest;

/* *
 CheckinResponse sends a broker response to the client's CheckinRequest. */
typedef struct _wippersnapper_checkin_CheckinResponse {
    wippersnapper_checkin_CheckinResponse_Response response; /* * Specifies if the hardware definition exists on the server. */
    int32_t total_gpio_pins; /* * Specifies the number of GPIO pins on the device. */
    int32_t total_analog_pins; /* * Specifies the number of analog pins on the device. */
    float reference_voltage; /* * Specifies the hardware's default reference voltage. */
} wippersnapper_checkin_CheckinResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _wippersnapper_checkin_CheckinResponse_Response_MIN wippersnapper_checkin_CheckinResponse_Response_RESPONSE_UNSPECIFIED
#define _wippersnapper_checkin_CheckinResponse_Response_MAX wippersnapper_checkin_CheckinResponse_Response_RESPONSE_BOARD_NOT_FOUND
#define _wippersnapper_checkin_CheckinResponse_Response_ARRAYSIZE ((wippersnapper_checkin_CheckinResponse_Response)(wippersnapper_checkin_CheckinResponse_Response_RESPONSE_BOARD_NOT_FOUND+1))


#define wippersnapper_checkin_CheckinResponse_response_ENUMTYPE wippersnapper_checkin_CheckinResponse_Response


/* Initializer values for message structs */
#define wippersnapper_checkin_CheckinRequest_init_default {"", ""}
#define wippersnapper_checkin_CheckinResponse_init_default {_wippersnapper_checkin_CheckinResponse_Response_MIN, 0, 0, 0}
#define wippersnapper_checkin_CheckinRequest_init_zero {"", ""}
#define wippersnapper_checkin_CheckinResponse_init_zero {_wippersnapper_checkin_CheckinResponse_Response_MIN, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define wippersnapper_checkin_CheckinRequest_hardware_uid_tag 1
#define wippersnapper_checkin_CheckinRequest_firmware_version_tag 2
#define wippersnapper_checkin_CheckinResponse_response_tag 1
#define wippersnapper_checkin_CheckinResponse_total_gpio_pins_tag 2
#define wippersnapper_checkin_CheckinResponse_total_analog_pins_tag 3
#define wippersnapper_checkin_CheckinResponse_reference_voltage_tag 4

/* Struct field encoding specification for nanopb */
#define wippersnapper_checkin_CheckinRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   hardware_uid,      1) \
X(a, STATIC,   SINGULAR, STRING,   firmware_version,   2)
#define wippersnapper_checkin_CheckinRequest_CALLBACK NULL
#define wippersnapper_checkin_CheckinRequest_DEFAULT NULL

#define wippersnapper_checkin_CheckinResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    response,          1) \
X(a, STATIC,   SINGULAR, INT32,    total_gpio_pins,   2) \
X(a, STATIC,   SINGULAR, INT32,    total_analog_pins,   3) \
X(a, STATIC,   SINGULAR, FLOAT,    reference_voltage,   4)
#define wippersnapper_checkin_CheckinResponse_CALLBACK NULL
#define wippersnapper_checkin_CheckinResponse_DEFAULT NULL

extern const pb_msgdesc_t wippersnapper_checkin_CheckinRequest_msg;
extern const pb_msgdesc_t wippersnapper_checkin_CheckinResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wippersnapper_checkin_CheckinRequest_fields &wippersnapper_checkin_CheckinRequest_msg
#define wippersnapper_checkin_CheckinResponse_fields &wippersnapper_checkin_CheckinResponse_msg

/* Maximum encoded size of messages (where known) */
#define WIPPERSNAPPER_CHECKIN_CHECKIN_PB_H_MAX_SIZE wippersnapper_checkin_CheckinRequest_size
#define wippersnapper_checkin_CheckinRequest_size 91
#define wippersnapper_checkin_CheckinResponse_size 29

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
