/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WIPPERSNAPPER_GPS_GPS_PB_H_INCLUDED
#define PB_WIPPERSNAPPER_GPS_GPS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 GPSConfig represents a message containing configuration data to set up and configure a GPS.
 Since GPS devices can output lots of data, this message allows users to select which data they want to receive
 and a resulting command string to initialize the GPS device with the selected options will be generated. */
typedef struct _wippersnapper_gps_GPSConfig {
    /* Baud rate is not included here as it is included in the UartAdd->UartSerialConfig message. */
    pb_size_t commands_count;
    char commands[16][90]; /* * List of commands to configure the GPS * */
    int32_t period; /* * The period to poll the GPS module, in milliseconds */
} wippersnapper_gps_GPSConfig;

/* * GPSDateTime represents the date and time information from a GPRMC/GPGGA string * */
typedef struct _wippersnapper_gps_GPSDateTime {
    int32_t hour; /* * Hour of the day (0-23) * */
    int32_t minute; /* * Minute of the hour (0-59) * */
    int32_t seconds; /* * Seconds of the minute (0-59) * */
    int32_t milliseconds; /* * Milliseconds (0-999) * */
    int32_t day; /* * Day of the month (1-31) * */
    int32_t month; /* * Month of the year (1-12) * */
    int32_t year; /* * Year (e.g., 2023) * */
} wippersnapper_gps_GPSDateTime;

/* * GPSRMCResponse represents the response from a GPS RMC (Recommended Minimum Specific GPS/Transit Data) message. * */
typedef struct _wippersnapper_gps_GPSRMCResponse {
    bool has_datetime;
    wippersnapper_gps_GPSDateTime datetime; /* * Date and time of the GPS data * */
    char fix_status[2]; /* * Fix status: 'A' for active, 'V' for void * */
    char lat[12]; /* * Latitude in decimal degrees * */
    char lat_dir[6]; /* * Latitude direction: 'North' or 'South' * */
    char lon[12]; /* * Longitude in decimal degrees * */
    char lon_dir[6]; /* * Longitude direction: 'East' or 'West' * */
    char speed[8]; /* * Speed, in knots * */
    char angle[7]; /* * Course/heading angle, in degrees * */
} wippersnapper_gps_GPSRMCResponse;

/* * GPGGAResponse represents the response from a GPS GGA (Global Positioning System Fix Data) message. * */
typedef struct _wippersnapper_gps_GPGGAResponse {
    bool has_datetime;
    wippersnapper_gps_GPSDateTime datetime; /* * Date and time of the GPS data * */
    char lat[12]; /* * Latitude in decimal degrees * */
    char lat_dir[6]; /* * Latitude direction: 'N' or 'S' * */
    char lon[12]; /* * Longitude in decimal degrees * */
    char lon_dir[6]; /* * Longitude direction: 'E' or 'W' * */
    int32_t fix_quality; /* * Quality of the GPS fix (0-3) * */
    int32_t num_satellites; /* * Number of satellites in use * */
    char hdop[6]; /* * HDOP- horizontal dilution of precision * */
    char altitude[8]; /* * Altitude in meters above MSL * */
    char geoid_height[10]; /* * Diff between geoid height and WGS84 height * */
} wippersnapper_gps_GPGGAResponse;

/* * GPSEvent represents a collection of GPS event responses, including RMC and GGA data. * */
typedef struct _wippersnapper_gps_GPSEvent {
    pb_callback_t rmc_responses; /* * List of RMC responses * */
    pb_callback_t gga_responses; /* * List of GGA responses * */
} wippersnapper_gps_GPSEvent;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define wippersnapper_gps_GPSConfig_init_default {0, {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, 0}
#define wippersnapper_gps_GPSDateTime_init_default {0, 0, 0, 0, 0, 0, 0}
#define wippersnapper_gps_GPSRMCResponse_init_default {false, wippersnapper_gps_GPSDateTime_init_default, "", "", "", "", "", "", ""}
#define wippersnapper_gps_GPGGAResponse_init_default {false, wippersnapper_gps_GPSDateTime_init_default, "", "", "", "", 0, 0, "", "", ""}
#define wippersnapper_gps_GPSEvent_init_default  {{{NULL}, NULL}, {{NULL}, NULL}}
#define wippersnapper_gps_GPSConfig_init_zero    {0, {"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""}, 0}
#define wippersnapper_gps_GPSDateTime_init_zero  {0, 0, 0, 0, 0, 0, 0}
#define wippersnapper_gps_GPSRMCResponse_init_zero {false, wippersnapper_gps_GPSDateTime_init_zero, "", "", "", "", "", "", ""}
#define wippersnapper_gps_GPGGAResponse_init_zero {false, wippersnapper_gps_GPSDateTime_init_zero, "", "", "", "", 0, 0, "", "", ""}
#define wippersnapper_gps_GPSEvent_init_zero     {{{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define wippersnapper_gps_GPSConfig_commands_tag 1
#define wippersnapper_gps_GPSConfig_period_tag   2
#define wippersnapper_gps_GPSDateTime_hour_tag   1
#define wippersnapper_gps_GPSDateTime_minute_tag 2
#define wippersnapper_gps_GPSDateTime_seconds_tag 3
#define wippersnapper_gps_GPSDateTime_milliseconds_tag 4
#define wippersnapper_gps_GPSDateTime_day_tag    5
#define wippersnapper_gps_GPSDateTime_month_tag  6
#define wippersnapper_gps_GPSDateTime_year_tag   7
#define wippersnapper_gps_GPSRMCResponse_datetime_tag 1
#define wippersnapper_gps_GPSRMCResponse_fix_status_tag 2
#define wippersnapper_gps_GPSRMCResponse_lat_tag 4
#define wippersnapper_gps_GPSRMCResponse_lat_dir_tag 5
#define wippersnapper_gps_GPSRMCResponse_lon_tag 6
#define wippersnapper_gps_GPSRMCResponse_lon_dir_tag 7
#define wippersnapper_gps_GPSRMCResponse_speed_tag 8
#define wippersnapper_gps_GPSRMCResponse_angle_tag 9
#define wippersnapper_gps_GPGGAResponse_datetime_tag 1
#define wippersnapper_gps_GPGGAResponse_lat_tag  4
#define wippersnapper_gps_GPGGAResponse_lat_dir_tag 5
#define wippersnapper_gps_GPGGAResponse_lon_tag  6
#define wippersnapper_gps_GPGGAResponse_lon_dir_tag 7
#define wippersnapper_gps_GPGGAResponse_fix_quality_tag 8
#define wippersnapper_gps_GPGGAResponse_num_satellites_tag 9
#define wippersnapper_gps_GPGGAResponse_hdop_tag 10
#define wippersnapper_gps_GPGGAResponse_altitude_tag 11
#define wippersnapper_gps_GPGGAResponse_geoid_height_tag 12
#define wippersnapper_gps_GPSEvent_rmc_responses_tag 1
#define wippersnapper_gps_GPSEvent_gga_responses_tag 2

/* Struct field encoding specification for nanopb */
#define wippersnapper_gps_GPSConfig_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, STRING,   commands,          1) \
X(a, STATIC,   SINGULAR, INT32,    period,            2)
#define wippersnapper_gps_GPSConfig_CALLBACK NULL
#define wippersnapper_gps_GPSConfig_DEFAULT NULL

#define wippersnapper_gps_GPSDateTime_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    hour,              1) \
X(a, STATIC,   SINGULAR, INT32,    minute,            2) \
X(a, STATIC,   SINGULAR, INT32,    seconds,           3) \
X(a, STATIC,   SINGULAR, INT32,    milliseconds,      4) \
X(a, STATIC,   SINGULAR, INT32,    day,               5) \
X(a, STATIC,   SINGULAR, INT32,    month,             6) \
X(a, STATIC,   SINGULAR, INT32,    year,              7)
#define wippersnapper_gps_GPSDateTime_CALLBACK NULL
#define wippersnapper_gps_GPSDateTime_DEFAULT NULL

#define wippersnapper_gps_GPSRMCResponse_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  datetime,          1) \
X(a, STATIC,   SINGULAR, STRING,   fix_status,        2) \
X(a, STATIC,   SINGULAR, STRING,   lat,               4) \
X(a, STATIC,   SINGULAR, STRING,   lat_dir,           5) \
X(a, STATIC,   SINGULAR, STRING,   lon,               6) \
X(a, STATIC,   SINGULAR, STRING,   lon_dir,           7) \
X(a, STATIC,   SINGULAR, STRING,   speed,             8) \
X(a, STATIC,   SINGULAR, STRING,   angle,             9)
#define wippersnapper_gps_GPSRMCResponse_CALLBACK NULL
#define wippersnapper_gps_GPSRMCResponse_DEFAULT NULL
#define wippersnapper_gps_GPSRMCResponse_datetime_MSGTYPE wippersnapper_gps_GPSDateTime

#define wippersnapper_gps_GPGGAResponse_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  datetime,          1) \
X(a, STATIC,   SINGULAR, STRING,   lat,               4) \
X(a, STATIC,   SINGULAR, STRING,   lat_dir,           5) \
X(a, STATIC,   SINGULAR, STRING,   lon,               6) \
X(a, STATIC,   SINGULAR, STRING,   lon_dir,           7) \
X(a, STATIC,   SINGULAR, INT32,    fix_quality,       8) \
X(a, STATIC,   SINGULAR, INT32,    num_satellites,    9) \
X(a, STATIC,   SINGULAR, STRING,   hdop,             10) \
X(a, STATIC,   SINGULAR, STRING,   altitude,         11) \
X(a, STATIC,   SINGULAR, STRING,   geoid_height,     12)
#define wippersnapper_gps_GPGGAResponse_CALLBACK NULL
#define wippersnapper_gps_GPGGAResponse_DEFAULT NULL
#define wippersnapper_gps_GPGGAResponse_datetime_MSGTYPE wippersnapper_gps_GPSDateTime

#define wippersnapper_gps_GPSEvent_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  rmc_responses,     1) \
X(a, CALLBACK, REPEATED, MESSAGE,  gga_responses,     2)
#define wippersnapper_gps_GPSEvent_CALLBACK pb_default_field_callback
#define wippersnapper_gps_GPSEvent_DEFAULT NULL
#define wippersnapper_gps_GPSEvent_rmc_responses_MSGTYPE wippersnapper_gps_GPSRMCResponse
#define wippersnapper_gps_GPSEvent_gga_responses_MSGTYPE wippersnapper_gps_GPGGAResponse

extern const pb_msgdesc_t wippersnapper_gps_GPSConfig_msg;
extern const pb_msgdesc_t wippersnapper_gps_GPSDateTime_msg;
extern const pb_msgdesc_t wippersnapper_gps_GPSRMCResponse_msg;
extern const pb_msgdesc_t wippersnapper_gps_GPGGAResponse_msg;
extern const pb_msgdesc_t wippersnapper_gps_GPSEvent_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wippersnapper_gps_GPSConfig_fields &wippersnapper_gps_GPSConfig_msg
#define wippersnapper_gps_GPSDateTime_fields &wippersnapper_gps_GPSDateTime_msg
#define wippersnapper_gps_GPSRMCResponse_fields &wippersnapper_gps_GPSRMCResponse_msg
#define wippersnapper_gps_GPGGAResponse_fields &wippersnapper_gps_GPGGAResponse_msg
#define wippersnapper_gps_GPSEvent_fields &wippersnapper_gps_GPSEvent_msg

/* Maximum encoded size of messages (where known) */
/* wippersnapper_gps_GPSEvent_size depends on runtime parameters */
#define WIPPERSNAPPER_GPS_GPS_PB_H_MAX_SIZE      wippersnapper_gps_GPSConfig_size
#define wippersnapper_gps_GPGGAResponse_size     168
#define wippersnapper_gps_GPSConfig_size         1467
#define wippersnapper_gps_GPSDateTime_size       77
#define wippersnapper_gps_GPSRMCResponse_size    139

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
