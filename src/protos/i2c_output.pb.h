/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WIPPERSNAPPER_I2C_OUTPUT_I2C_OUTPUT_PB_H_INCLUDED
#define PB_WIPPERSNAPPER_I2C_OUTPUT_I2C_OUTPUT_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* *
 LedBackpackAlignment represents all text alignment option for LED backpack displays */
typedef enum _wippersnapper_i2c_output_LedBackpackAlignment {
    wippersnapper_i2c_output_LedBackpackAlignment_LED_BACKPACK_ALIGNMENT_UNSPECIFIED = 0, /* * Unspecified alignment option. * */
    wippersnapper_i2c_output_LedBackpackAlignment_LED_BACKPACK_ALIGNMENT_LEFT = 1, /* * (Default) Left-aligned. * */
    wippersnapper_i2c_output_LedBackpackAlignment_LED_BACKPACK_ALIGNMENT_RIGHT = 2 /* * Right-aligned. * */
} wippersnapper_i2c_output_LedBackpackAlignment;

/* *
 Desired OLED display text 'magnification' size. */
typedef enum _wippersnapper_i2c_output_OledTextSize {
    wippersnapper_i2c_output_OledTextSize_OLED_TEXT_SIZE_UNSPECIFIED = 0, /* * Unspecified text size. * */
    wippersnapper_i2c_output_OledTextSize_OLED_TEXT_SIZE_DEFAULT = 1, /* * Default text size, 6x8px. * */
    wippersnapper_i2c_output_OledTextSize_OLED_TEXT_SIZE_LARGE = 2 /* * Larger text size option, 12x16px. * */
} wippersnapper_i2c_output_OledTextSize;

/* Struct definitions */
/* *
 LedBackpackConfig represents the configuration for a LED backpack display. */
typedef struct _wippersnapper_i2c_output_LedBackpackConfig {
    int32_t brightness; /* * Desired brightness of the LED backpack, from 0 (off) to 15 (full brightness). * */
    wippersnapper_i2c_output_LedBackpackAlignment alignment; /* * Desired text alignment for the LED backpack. * */
} wippersnapper_i2c_output_LedBackpackConfig;

/* *
 CharLCDConfig represents the configuration for a character LCD display. */
typedef struct _wippersnapper_i2c_output_CharLCDConfig {
    uint32_t rows; /* * Number of rows for the character LCD. * */
    uint32_t columns; /* * Number of columns for the character LCD. * */
} wippersnapper_i2c_output_CharLCDConfig;

/* *
 OledConfig represents the configuration for a OLED display. */
typedef struct _wippersnapper_i2c_output_OledConfig {
    uint32_t width; /* * Width of the OLED display in pixels. * */
    uint32_t height; /* * Height of the OLED display in pixels. * */
    wippersnapper_i2c_output_OledTextSize font_size; /* * Desired font magnification for the OLED display. Defaults to OLED_TEXT_SIZE_DEFAULT. * */
} wippersnapper_i2c_output_OledConfig;

/* *
 I2cOutputAdd represents a request from the broker to add an I2C output device to a device. */
typedef struct _wippersnapper_i2c_output_I2cOutputAdd {
    pb_size_t which_config;
    union {
        wippersnapper_i2c_output_LedBackpackConfig led_backpack_config; /* * Configuration for a LED backpack. * */
        wippersnapper_i2c_output_CharLCDConfig char_lcd_config; /* * Configuration for a character LCD. * */
        wippersnapper_i2c_output_OledConfig oled_config; /* * Configuration for an OLED display. * */
    } config;
} wippersnapper_i2c_output_I2cOutputAdd;

/* *
 LedBackpackWrite represents a request from the broker to write a message to a LED backpack. */
typedef struct _wippersnapper_i2c_output_LedBackpackWrite {
    char message[8]; /* * Message to write to the LED backpack. * */
} wippersnapper_i2c_output_LedBackpackWrite;

/* *
 CharLCDWrite represents a request from the broker to write to a character LCD. */
typedef struct _wippersnapper_i2c_output_CharLCDWrite {
    char message[100]; /* * Message to write to the character LCD. * */
    bool enable_backlight; /* * Whether to enable the backlight. Defaults to True. * */
} wippersnapper_i2c_output_CharLCDWrite;

/* *
 OLEDWrite represents a request from the broker to write to a OLED display. */
typedef struct _wippersnapper_i2c_output_OLEDWrite {
    char message[512]; /* * Message to write to an OLED display. * */
} wippersnapper_i2c_output_OLEDWrite;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _wippersnapper_i2c_output_LedBackpackAlignment_MIN wippersnapper_i2c_output_LedBackpackAlignment_LED_BACKPACK_ALIGNMENT_UNSPECIFIED
#define _wippersnapper_i2c_output_LedBackpackAlignment_MAX wippersnapper_i2c_output_LedBackpackAlignment_LED_BACKPACK_ALIGNMENT_RIGHT
#define _wippersnapper_i2c_output_LedBackpackAlignment_ARRAYSIZE ((wippersnapper_i2c_output_LedBackpackAlignment)(wippersnapper_i2c_output_LedBackpackAlignment_LED_BACKPACK_ALIGNMENT_RIGHT+1))

#define _wippersnapper_i2c_output_OledTextSize_MIN wippersnapper_i2c_output_OledTextSize_OLED_TEXT_SIZE_UNSPECIFIED
#define _wippersnapper_i2c_output_OledTextSize_MAX wippersnapper_i2c_output_OledTextSize_OLED_TEXT_SIZE_LARGE
#define _wippersnapper_i2c_output_OledTextSize_ARRAYSIZE ((wippersnapper_i2c_output_OledTextSize)(wippersnapper_i2c_output_OledTextSize_OLED_TEXT_SIZE_LARGE+1))

#define wippersnapper_i2c_output_LedBackpackConfig_alignment_ENUMTYPE wippersnapper_i2c_output_LedBackpackAlignment


#define wippersnapper_i2c_output_OledConfig_font_size_ENUMTYPE wippersnapper_i2c_output_OledTextSize






/* Initializer values for message structs */
#define wippersnapper_i2c_output_LedBackpackConfig_init_default {0, _wippersnapper_i2c_output_LedBackpackAlignment_MIN}
#define wippersnapper_i2c_output_CharLCDConfig_init_default {0, 0}
#define wippersnapper_i2c_output_OledConfig_init_default {0, 0, _wippersnapper_i2c_output_OledTextSize_MIN}
#define wippersnapper_i2c_output_I2cOutputAdd_init_default {0, {wippersnapper_i2c_output_LedBackpackConfig_init_default}}
#define wippersnapper_i2c_output_LedBackpackWrite_init_default {""}
#define wippersnapper_i2c_output_CharLCDWrite_init_default {"", 0}
#define wippersnapper_i2c_output_OLEDWrite_init_default {""}
#define wippersnapper_i2c_output_LedBackpackConfig_init_zero {0, _wippersnapper_i2c_output_LedBackpackAlignment_MIN}
#define wippersnapper_i2c_output_CharLCDConfig_init_zero {0, 0}
#define wippersnapper_i2c_output_OledConfig_init_zero {0, 0, _wippersnapper_i2c_output_OledTextSize_MIN}
#define wippersnapper_i2c_output_I2cOutputAdd_init_zero {0, {wippersnapper_i2c_output_LedBackpackConfig_init_zero}}
#define wippersnapper_i2c_output_LedBackpackWrite_init_zero {""}
#define wippersnapper_i2c_output_CharLCDWrite_init_zero {"", 0}
#define wippersnapper_i2c_output_OLEDWrite_init_zero {""}

/* Field tags (for use in manual encoding/decoding) */
#define wippersnapper_i2c_output_LedBackpackConfig_brightness_tag 1
#define wippersnapper_i2c_output_LedBackpackConfig_alignment_tag 2
#define wippersnapper_i2c_output_CharLCDConfig_rows_tag 1
#define wippersnapper_i2c_output_CharLCDConfig_columns_tag 2
#define wippersnapper_i2c_output_OledConfig_width_tag 1
#define wippersnapper_i2c_output_OledConfig_height_tag 2
#define wippersnapper_i2c_output_OledConfig_font_size_tag 3
#define wippersnapper_i2c_output_I2cOutputAdd_led_backpack_config_tag 1
#define wippersnapper_i2c_output_I2cOutputAdd_char_lcd_config_tag 2
#define wippersnapper_i2c_output_I2cOutputAdd_oled_config_tag 3
#define wippersnapper_i2c_output_LedBackpackWrite_message_tag 1
#define wippersnapper_i2c_output_CharLCDWrite_message_tag 1
#define wippersnapper_i2c_output_CharLCDWrite_enable_backlight_tag 2
#define wippersnapper_i2c_output_OLEDWrite_message_tag 1

/* Struct field encoding specification for nanopb */
#define wippersnapper_i2c_output_LedBackpackConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    brightness,        1) \
X(a, STATIC,   SINGULAR, UENUM,    alignment,         2)
#define wippersnapper_i2c_output_LedBackpackConfig_CALLBACK NULL
#define wippersnapper_i2c_output_LedBackpackConfig_DEFAULT NULL

#define wippersnapper_i2c_output_CharLCDConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   rows,              1) \
X(a, STATIC,   SINGULAR, UINT32,   columns,           2)
#define wippersnapper_i2c_output_CharLCDConfig_CALLBACK NULL
#define wippersnapper_i2c_output_CharLCDConfig_DEFAULT NULL

#define wippersnapper_i2c_output_OledConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   width,             1) \
X(a, STATIC,   SINGULAR, UINT32,   height,            2) \
X(a, STATIC,   SINGULAR, UENUM,    font_size,         3)
#define wippersnapper_i2c_output_OledConfig_CALLBACK NULL
#define wippersnapper_i2c_output_OledConfig_DEFAULT NULL

#define wippersnapper_i2c_output_I2cOutputAdd_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,led_backpack_config,config.led_backpack_config),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,char_lcd_config,config.char_lcd_config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,oled_config,config.oled_config),   3)
#define wippersnapper_i2c_output_I2cOutputAdd_CALLBACK NULL
#define wippersnapper_i2c_output_I2cOutputAdd_DEFAULT NULL
#define wippersnapper_i2c_output_I2cOutputAdd_config_led_backpack_config_MSGTYPE wippersnapper_i2c_output_LedBackpackConfig
#define wippersnapper_i2c_output_I2cOutputAdd_config_char_lcd_config_MSGTYPE wippersnapper_i2c_output_CharLCDConfig
#define wippersnapper_i2c_output_I2cOutputAdd_config_oled_config_MSGTYPE wippersnapper_i2c_output_OledConfig

#define wippersnapper_i2c_output_LedBackpackWrite_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   message,           1)
#define wippersnapper_i2c_output_LedBackpackWrite_CALLBACK NULL
#define wippersnapper_i2c_output_LedBackpackWrite_DEFAULT NULL

#define wippersnapper_i2c_output_CharLCDWrite_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   message,           1) \
X(a, STATIC,   SINGULAR, BOOL,     enable_backlight,   2)
#define wippersnapper_i2c_output_CharLCDWrite_CALLBACK NULL
#define wippersnapper_i2c_output_CharLCDWrite_DEFAULT NULL

#define wippersnapper_i2c_output_OLEDWrite_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   message,           1)
#define wippersnapper_i2c_output_OLEDWrite_CALLBACK NULL
#define wippersnapper_i2c_output_OLEDWrite_DEFAULT NULL

extern const pb_msgdesc_t wippersnapper_i2c_output_LedBackpackConfig_msg;
extern const pb_msgdesc_t wippersnapper_i2c_output_CharLCDConfig_msg;
extern const pb_msgdesc_t wippersnapper_i2c_output_OledConfig_msg;
extern const pb_msgdesc_t wippersnapper_i2c_output_I2cOutputAdd_msg;
extern const pb_msgdesc_t wippersnapper_i2c_output_LedBackpackWrite_msg;
extern const pb_msgdesc_t wippersnapper_i2c_output_CharLCDWrite_msg;
extern const pb_msgdesc_t wippersnapper_i2c_output_OLEDWrite_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wippersnapper_i2c_output_LedBackpackConfig_fields &wippersnapper_i2c_output_LedBackpackConfig_msg
#define wippersnapper_i2c_output_CharLCDConfig_fields &wippersnapper_i2c_output_CharLCDConfig_msg
#define wippersnapper_i2c_output_OledConfig_fields &wippersnapper_i2c_output_OledConfig_msg
#define wippersnapper_i2c_output_I2cOutputAdd_fields &wippersnapper_i2c_output_I2cOutputAdd_msg
#define wippersnapper_i2c_output_LedBackpackWrite_fields &wippersnapper_i2c_output_LedBackpackWrite_msg
#define wippersnapper_i2c_output_CharLCDWrite_fields &wippersnapper_i2c_output_CharLCDWrite_msg
#define wippersnapper_i2c_output_OLEDWrite_fields &wippersnapper_i2c_output_OLEDWrite_msg

/* Maximum encoded size of messages (where known) */
#define WIPPERSNAPPER_I2C_OUTPUT_I2C_OUTPUT_PB_H_MAX_SIZE wippersnapper_i2c_output_OLEDWrite_size
#define wippersnapper_i2c_output_CharLCDConfig_size 12
#define wippersnapper_i2c_output_CharLCDWrite_size 103
#define wippersnapper_i2c_output_I2cOutputAdd_size 16
#define wippersnapper_i2c_output_LedBackpackConfig_size 13
#define wippersnapper_i2c_output_LedBackpackWrite_size 9
#define wippersnapper_i2c_output_OLEDWrite_size  514
#define wippersnapper_i2c_output_OledConfig_size 14

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
