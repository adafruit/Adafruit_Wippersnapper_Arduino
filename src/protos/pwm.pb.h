/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WIPPERSNAPPER_PWM_PWM_PB_H_INCLUDED
#define PB_WIPPERSNAPPER_PWM_PWM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 PWMAdd represents a  to a device to attach/allocate a PWM pin.
 On ESP32 Arduino, this will "attach" a pin to a LEDC channel/timer group.
 On non-ESP32 Arduino, this does nothing. */
typedef struct _wippersnapper_pwm_PWMAdd {
    char pin[6]; /* * The pin to be attached. */
    int32_t frequency; /* * PWM frequency of an analog pin, in Hz. * */
    int32_t resolution; /* * The resolution of an analog pin, in bits. * */
} wippersnapper_pwm_PWMAdd;

/* *
 PWMAdded represents a response from a device's execution of an
 Add message. */
typedef struct _wippersnapper_pwm_PWMAdded {
    char pin[6]; /* * The ed pin. */
    bool did_attach; /* * True if Add successful, False otherwise. */
} wippersnapper_pwm_PWMAdded;

/* *
 PWMRemove represents a  to stop PWM'ing and release the pin for re-use.
 On ESP32, this will "detach" a pin from a LEDC channel/timer group.
 On non-ESP32 Arduino, this calls digitalWrite(LOW) on the pin */
typedef struct _wippersnapper_pwm_PWMRemove {
    char pin[6]; /* * The PWM pin to de-initialized. */
} wippersnapper_pwm_PWMRemove;

/* *
 PWMWriteDutyCycle represents a  to write a duty cycle to a pin with a frequency (fixed).
 This is used for controlling LEDs. */
typedef struct _wippersnapper_pwm_PWMWriteDutyCycle {
    char pin[6]; /* * The pin to write to. */
    int32_t duty_cycle; /* * The desired duty cycle to write (range is from 0 to (2 ** duty_resolution)).
This value will be changed by the slider on Adafruit IO. * */
} wippersnapper_pwm_PWMWriteDutyCycle;

/* *
 PWMWriteDutyCycleMulti represents a wrapper  to write duty cycles to multiple pins.
 This is used for controlling RGB/RGBW LEDs. */
typedef struct _wippersnapper_pwm_PWMWriteDutyCycleMulti {
    pb_size_t write_duty_cycle_reqs_count;
    wippersnapper_pwm_PWMWriteDutyCycle write_duty_cycle_reqs[4]; /* * Multiple duty cycles to write, one per pin of a RGB LED. * */
} wippersnapper_pwm_PWMWriteDutyCycleMulti;

/* *
 PWMWriteFrequency represents a  to write a Frequency, in Hz, to a pin with a duty cycle of 50%.
 This is used for playing tones using a piezo buzzer or speaker. */
typedef struct _wippersnapper_pwm_PWMWriteFrequency {
    char pin[6]; /* * The pin to write to. */
    int32_t frequency; /* * The desired PWM frequency, in Hz. This value will be changed by the slider on Adafruit IO. * */
} wippersnapper_pwm_PWMWriteFrequency;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define wippersnapper_pwm_PWMAdd_init_default    {"", 0, 0}
#define wippersnapper_pwm_PWMAdded_init_default  {"", 0}
#define wippersnapper_pwm_PWMRemove_init_default {""}
#define wippersnapper_pwm_PWMWriteDutyCycle_init_default {"", 0}
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_init_default {0, {wippersnapper_pwm_PWMWriteDutyCycle_init_default, wippersnapper_pwm_PWMWriteDutyCycle_init_default, wippersnapper_pwm_PWMWriteDutyCycle_init_default, wippersnapper_pwm_PWMWriteDutyCycle_init_default}}
#define wippersnapper_pwm_PWMWriteFrequency_init_default {"", 0}
#define wippersnapper_pwm_PWMAdd_init_zero       {"", 0, 0}
#define wippersnapper_pwm_PWMAdded_init_zero     {"", 0}
#define wippersnapper_pwm_PWMRemove_init_zero    {""}
#define wippersnapper_pwm_PWMWriteDutyCycle_init_zero {"", 0}
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_init_zero {0, {wippersnapper_pwm_PWMWriteDutyCycle_init_zero, wippersnapper_pwm_PWMWriteDutyCycle_init_zero, wippersnapper_pwm_PWMWriteDutyCycle_init_zero, wippersnapper_pwm_PWMWriteDutyCycle_init_zero}}
#define wippersnapper_pwm_PWMWriteFrequency_init_zero {"", 0}

/* Field tags (for use in manual encoding/decoding) */
#define wippersnapper_pwm_PWMAdd_pin_tag         1
#define wippersnapper_pwm_PWMAdd_frequency_tag   2
#define wippersnapper_pwm_PWMAdd_resolution_tag  3
#define wippersnapper_pwm_PWMAdded_pin_tag       1
#define wippersnapper_pwm_PWMAdded_did_attach_tag 2
#define wippersnapper_pwm_PWMRemove_pin_tag      1
#define wippersnapper_pwm_PWMWriteDutyCycle_pin_tag 1
#define wippersnapper_pwm_PWMWriteDutyCycle_duty_cycle_tag 2
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_write_duty_cycle_reqs_tag 1
#define wippersnapper_pwm_PWMWriteFrequency_pin_tag 1
#define wippersnapper_pwm_PWMWriteFrequency_frequency_tag 2

/* Struct field encoding specification for nanopb */
#define wippersnapper_pwm_PWMAdd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   pin,               1) \
X(a, STATIC,   SINGULAR, INT32,    frequency,         2) \
X(a, STATIC,   SINGULAR, INT32,    resolution,        3)
#define wippersnapper_pwm_PWMAdd_CALLBACK NULL
#define wippersnapper_pwm_PWMAdd_DEFAULT NULL

#define wippersnapper_pwm_PWMAdded_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   pin,               1) \
X(a, STATIC,   SINGULAR, BOOL,     did_attach,        2)
#define wippersnapper_pwm_PWMAdded_CALLBACK NULL
#define wippersnapper_pwm_PWMAdded_DEFAULT NULL

#define wippersnapper_pwm_PWMRemove_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   pin,               1)
#define wippersnapper_pwm_PWMRemove_CALLBACK NULL
#define wippersnapper_pwm_PWMRemove_DEFAULT NULL

#define wippersnapper_pwm_PWMWriteDutyCycle_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   pin,               1) \
X(a, STATIC,   SINGULAR, INT32,    duty_cycle,        2)
#define wippersnapper_pwm_PWMWriteDutyCycle_CALLBACK NULL
#define wippersnapper_pwm_PWMWriteDutyCycle_DEFAULT NULL

#define wippersnapper_pwm_PWMWriteDutyCycleMulti_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  write_duty_cycle_reqs,   1)
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_CALLBACK NULL
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_DEFAULT NULL
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_write_duty_cycle_reqs_MSGTYPE wippersnapper_pwm_PWMWriteDutyCycle

#define wippersnapper_pwm_PWMWriteFrequency_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   pin,               1) \
X(a, STATIC,   SINGULAR, INT32,    frequency,         2)
#define wippersnapper_pwm_PWMWriteFrequency_CALLBACK NULL
#define wippersnapper_pwm_PWMWriteFrequency_DEFAULT NULL

extern const pb_msgdesc_t wippersnapper_pwm_PWMAdd_msg;
extern const pb_msgdesc_t wippersnapper_pwm_PWMAdded_msg;
extern const pb_msgdesc_t wippersnapper_pwm_PWMRemove_msg;
extern const pb_msgdesc_t wippersnapper_pwm_PWMWriteDutyCycle_msg;
extern const pb_msgdesc_t wippersnapper_pwm_PWMWriteDutyCycleMulti_msg;
extern const pb_msgdesc_t wippersnapper_pwm_PWMWriteFrequency_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wippersnapper_pwm_PWMAdd_fields &wippersnapper_pwm_PWMAdd_msg
#define wippersnapper_pwm_PWMAdded_fields &wippersnapper_pwm_PWMAdded_msg
#define wippersnapper_pwm_PWMRemove_fields &wippersnapper_pwm_PWMRemove_msg
#define wippersnapper_pwm_PWMWriteDutyCycle_fields &wippersnapper_pwm_PWMWriteDutyCycle_msg
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_fields &wippersnapper_pwm_PWMWriteDutyCycleMulti_msg
#define wippersnapper_pwm_PWMWriteFrequency_fields &wippersnapper_pwm_PWMWriteFrequency_msg

/* Maximum encoded size of messages (where known) */
#define WIPPERSNAPPER_PWM_PWM_PB_H_MAX_SIZE      wippersnapper_pwm_PWMWriteDutyCycleMulti_size
#define wippersnapper_pwm_PWMAdd_size            29
#define wippersnapper_pwm_PWMAdded_size          9
#define wippersnapper_pwm_PWMRemove_size         7
#define wippersnapper_pwm_PWMWriteDutyCycleMulti_size 80
#define wippersnapper_pwm_PWMWriteDutyCycle_size 18
#define wippersnapper_pwm_PWMWriteFrequency_size 18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
