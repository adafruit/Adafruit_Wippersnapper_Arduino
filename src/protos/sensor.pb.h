/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_WIPPERSNAPPER_SENSOR_SENSOR_PB_H_INCLUDED
#define PB_WIPPERSNAPPER_SENSOR_SENSOR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* *
 SensorType allows us determine what types of units the sensor uses, etc. */
typedef enum _wippersnapper_sensor_SensorType {
    wippersnapper_sensor_SensorType_SENSOR_TYPE_UNSPECIFIED = 0, /* * Sensor value type which is not defined by this list, "Raw Value: {value}". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_ACCELEROMETER = 1, /* * Acceleration, in meter per second per second, "{value}m/s/s". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_MAGNETIC_FIELD = 2, /* * Magnetic field strength, in micro-Tesla, "{value}µT". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_ORIENTATION = 3, /* * Orientation angle, in degrees, "{value}°". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_GYROSCOPE = 4, /* * Angular rate, in radians per second, "{value}rad/s". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_LIGHT = 5, /* * Light-level, non-unit-specific (For a unit-specific measurement, see: Lux),
"Raw Value: {value}". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PRESSURE = 6, /* * Pressure, in hectopascal, , "{value}hPa". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PROXIMITY = 8, /* * Distance from an object to a sensor, non-unit-specific, "Raw Value: {value}". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_GRAVITY = 9, /* * Metres per second squared, "{value}m/s^2". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_LINEAR_ACCELERATION = 10, /* * Acceleration not including gravity, in meter per second squared, "{value}m/s^2". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_ROTATION_VECTOR = 11, /* * An angle in radians, "{value} rad". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_RELATIVE_HUMIDITY = 12, /* * in percent (%), "{value}%". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_AMBIENT_TEMPERATURE = 13, /* * Temperature of the air around a sensor, in degrees Celsius, "{value}°C". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_OBJECT_TEMPERATURE = 14, /* * Temperature of the object a sensor is touching/pointed at, in degrees Celsius, "{value}°C". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_VOLTAGE = 15, /* * Volts, "{value}V". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_CURRENT = 16, /* * Milliamps, "{value}mA". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_COLOR = 17, /* * Values are in 0..1.0 RGB channel luminosity and 32-bit RGBA format. "Color: {value}". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_RAW = 18, /* * Sensor reads a value which is not defined by this list, "Raw Value: {value}". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PM10_STD = 19, /* * Standard Particulate Matter 1.0, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PM25_STD = 20, /* * Standard Particulate Matter 2.5, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PM100_STD = 21, /* * Standard Particulate Matter 100, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PM10_ENV = 22, /* * Environmental Particulate Matter 1.0, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PM25_ENV = 23, /* * Environmental Particulate Matter 2.5, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_PM100_ENV = 24, /* * Environmental Particulate Matter 100, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_CO2 = 25, /* * Measured CO2, in ppm, "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_GAS_RESISTANCE = 26, /* * Proportional to the amount of VOC particles in the air, in Ohms, "{value}Ω". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_ALTITUDE = 27, /* * Values are in meters (m), "${$v} m". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_LUX = 28, /* * Light level, in lux, "Lux: {value}". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_ECO2 = 29, /* * equivalent/estimated CO2 in ppm (estimated from some other measurement), "{value}ppm". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_UNITLESS_PERCENT = 30, /* * Percentage, unit-less, "{value}%". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_AMBIENT_TEMPERATURE_FAHRENHEIT = 31, /* * Temperature of the air around a sensor, in degrees Fahrenheit, "{value}°F". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_OBJECT_TEMPERATURE_FAHRENHEIT = 32, /* * Temperature of the object a sensor is touching/pointed at, in Fahrenheit, "{value}°F". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_VOC_INDEX = 33, /* * Values are an index from 1-500 with 100 being normal, "${$v} VOC". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_NOX_INDEX = 34, /* * Values are an index from 1-500 with 100 being normal, "${$v} NOx". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_TVOC = 35, /* * Values are in parts per billion (ppb), "${$v} ppb". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_BYTES = 36, /* * Values are in bytes, "${$v} bytes". */
    wippersnapper_sensor_SensorType_SENSOR_TYPE_BOOLEAN = 37 /* * Values are boolean, "Boolean Value: ${$v}". */
} wippersnapper_sensor_SensorType;

/* Struct definitions */
/* *
 SensorEventColor is used to return a sensor's color values in RGB colorspace. */
typedef struct _wippersnapper_sensor_SensorEvent_SensorEventColor {
    float r; /* * The sensor's red channel value as a float. */
    float g; /* * The sensor's green channel value as a float. */
    float b; /* * The sensor's blue channel value as a float. */
    float a; /* * The sensor's (optional) alpha channel value as a float. */
} wippersnapper_sensor_SensorEvent_SensorEventColor;

/* *
 SensorEvent3DVector is used to return a sensor's 3D vector values. */
typedef struct _wippersnapper_sensor_SensorEvent_SensorEvent3DVector {
    float x; /* * The sensor's x-axis value as a float. */
    float y; /* * The sensor's y-axis value as a float. */
    float z; /* * The sensor's z-axis value as a float. */
} wippersnapper_sensor_SensorEvent_SensorEvent3DVector;

/* *
 SensorEventOrientation is used to return an orientation sensor's values. */
typedef struct _wippersnapper_sensor_SensorEvent_SensorEventOrientation {
    float roll; /* * The sensor's roll value as a float. */
    float pitch; /* * The sensor's pitch value as a float. */
    float heading; /* * The sensor's heading value as a float. */
} wippersnapper_sensor_SensorEvent_SensorEventOrientation;

/* *
 SensorEvent  is used to return the sensor's value and type. */
typedef struct _wippersnapper_sensor_SensorEvent {
    wippersnapper_sensor_SensorType type; /* * The sensor's type and corresponding SI unit */
    pb_size_t which_value;
    union {
        float float_value; /* * The sensor's value as a float. */
        pb_callback_t bytes_value; /* * The sensor's value as a byte array. */
        wippersnapper_sensor_SensorEvent_SensorEvent3DVector vector_value; /* * The sensor's 3D vector values, as floats. */
        wippersnapper_sensor_SensorEvent_SensorEventOrientation orientation_value; /* * The sensor's orientation values, as floats. */
        wippersnapper_sensor_SensorEvent_SensorEventColor color_value; /* * The sensor's color values, as floats. */
        bool bool_value; /* * The sensor's value, as a boolean. */
    } value;
} wippersnapper_sensor_SensorEvent;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _wippersnapper_sensor_SensorType_MIN wippersnapper_sensor_SensorType_SENSOR_TYPE_UNSPECIFIED
#define _wippersnapper_sensor_SensorType_MAX wippersnapper_sensor_SensorType_SENSOR_TYPE_BOOLEAN
#define _wippersnapper_sensor_SensorType_ARRAYSIZE ((wippersnapper_sensor_SensorType)(wippersnapper_sensor_SensorType_SENSOR_TYPE_BOOLEAN+1))

#define wippersnapper_sensor_SensorEvent_type_ENUMTYPE wippersnapper_sensor_SensorType





/* Initializer values for message structs */
#define wippersnapper_sensor_SensorEvent_init_default {_wippersnapper_sensor_SensorType_MIN, 0, {0}}
#define wippersnapper_sensor_SensorEvent_SensorEventColor_init_default {0, 0, 0, 0}
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_init_default {0, 0, 0}
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_init_default {0, 0, 0}
#define wippersnapper_sensor_SensorEvent_init_zero {_wippersnapper_sensor_SensorType_MIN, 0, {0}}
#define wippersnapper_sensor_SensorEvent_SensorEventColor_init_zero {0, 0, 0, 0}
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_init_zero {0, 0, 0}
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_init_zero {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define wippersnapper_sensor_SensorEvent_SensorEventColor_r_tag 1
#define wippersnapper_sensor_SensorEvent_SensorEventColor_g_tag 2
#define wippersnapper_sensor_SensorEvent_SensorEventColor_b_tag 3
#define wippersnapper_sensor_SensorEvent_SensorEventColor_a_tag 4
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_x_tag 1
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_y_tag 2
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_z_tag 3
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_roll_tag 1
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_pitch_tag 2
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_heading_tag 3
#define wippersnapper_sensor_SensorEvent_type_tag 1
#define wippersnapper_sensor_SensorEvent_float_value_tag 2
#define wippersnapper_sensor_SensorEvent_bytes_value_tag 3
#define wippersnapper_sensor_SensorEvent_vector_value_tag 4
#define wippersnapper_sensor_SensorEvent_orientation_value_tag 5
#define wippersnapper_sensor_SensorEvent_color_value_tag 6
#define wippersnapper_sensor_SensorEvent_bool_value_tag 7

/* Struct field encoding specification for nanopb */
#define wippersnapper_sensor_SensorEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   ONEOF,    FLOAT,    (value,float_value,value.float_value),   2) \
X(a, CALLBACK, ONEOF,    BYTES,    (value,bytes_value,value.bytes_value),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,vector_value,value.vector_value),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,orientation_value,value.orientation_value),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (value,color_value,value.color_value),   6) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_value,value.bool_value),   7)
#define wippersnapper_sensor_SensorEvent_CALLBACK pb_default_field_callback
#define wippersnapper_sensor_SensorEvent_DEFAULT NULL
#define wippersnapper_sensor_SensorEvent_value_vector_value_MSGTYPE wippersnapper_sensor_SensorEvent_SensorEvent3DVector
#define wippersnapper_sensor_SensorEvent_value_orientation_value_MSGTYPE wippersnapper_sensor_SensorEvent_SensorEventOrientation
#define wippersnapper_sensor_SensorEvent_value_color_value_MSGTYPE wippersnapper_sensor_SensorEvent_SensorEventColor

#define wippersnapper_sensor_SensorEvent_SensorEventColor_FIELDLIST(X, a_) \
X(a_, STATIC,   SINGULAR, FLOAT,    r,                 1) \
X(a_, STATIC,   SINGULAR, FLOAT,    g,                 2) \
X(a_, STATIC,   SINGULAR, FLOAT,    b,                 3) \
X(a_, STATIC,   SINGULAR, FLOAT,    a,                 4)
#define wippersnapper_sensor_SensorEvent_SensorEventColor_CALLBACK NULL
#define wippersnapper_sensor_SensorEvent_SensorEventColor_DEFAULT NULL

#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3)
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_CALLBACK NULL
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_DEFAULT NULL

#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    roll,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    pitch,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    heading,           3)
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_CALLBACK NULL
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_DEFAULT NULL

extern const pb_msgdesc_t wippersnapper_sensor_SensorEvent_msg;
extern const pb_msgdesc_t wippersnapper_sensor_SensorEvent_SensorEventColor_msg;
extern const pb_msgdesc_t wippersnapper_sensor_SensorEvent_SensorEvent3DVector_msg;
extern const pb_msgdesc_t wippersnapper_sensor_SensorEvent_SensorEventOrientation_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define wippersnapper_sensor_SensorEvent_fields &wippersnapper_sensor_SensorEvent_msg
#define wippersnapper_sensor_SensorEvent_SensorEventColor_fields &wippersnapper_sensor_SensorEvent_SensorEventColor_msg
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_fields &wippersnapper_sensor_SensorEvent_SensorEvent3DVector_msg
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_fields &wippersnapper_sensor_SensorEvent_SensorEventOrientation_msg

/* Maximum encoded size of messages (where known) */
/* wippersnapper_sensor_SensorEvent_size depends on runtime parameters */
#define WIPPERSNAPPER_SENSOR_SENSOR_PB_H_MAX_SIZE wippersnapper_sensor_SensorEvent_SensorEventColor_size
#define wippersnapper_sensor_SensorEvent_SensorEvent3DVector_size 15
#define wippersnapper_sensor_SensorEvent_SensorEventColor_size 20
#define wippersnapper_sensor_SensorEvent_SensorEventOrientation_size 15

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
